{"version":3,"sources":["model/worker.ts","components/BlurContainer.tsx","components/SquareButton.tsx","Icons/check.svg","Icons/no-check.svg","components/camera/SourceSelectorItem.tsx","Icons/gear.svg","components/camera/SourceSelector.tsx","components/camera/Camera.tsx","components/prediction/PredictionEntry.tsx","components/prediction/Prediction.tsx","Icons/gallery.svg","components/staticImage/ImageSelectorButton.tsx","Icons/close.svg","components/staticImage/ImageCloseButton.tsx","components/staticImage/StaticImage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","BlurContainer","additionalClassname","children","className","SquareButton","onClick","setHover","undefined","onMouseEnter","onMouseLeave","SourceSelectorItem","selected","onSelect","src","check","noCheck","alt","SourceSelector","devices","deviceId","setDeviceId","imageFlip","setImageFlip","selectorVisible","setSelectorVisible","useState","hovering","id","e","stopPropagation","gear","map","device","key","label","replace","Camera","predictCanvas","predictions","setDevices","webcamRef","useRef","handleDevices","useCallback","mediaDevices","videoDevices","filter","kind","length","useEffect","navigator","enumerateDevices","then","getCanvas","a","current","newImage","sleep","ms","Promise","resolve","reject","setTimeout","canvas","currentCanvas","ref","screenshotFormat","forceScreenshotSourceSize","screenshotQuality","audio","videoConstraints","width","ideal","height","exact","mirrored","PredictionEntry","confidence","top","style","toString","Prediction","sortedPredictions","Object","entries","sort","b","slice","idx","ImageSelectorButton","setImageFile","imageFile","fileInput","value","click","gallery","type","accept","onChange","files","target","display","ImageCloseButton","close","StaticImage","image","reader","FileReader","onload","img","Image","ctx","getContext","drawImage","result","backgroundImage","readAsDataURL","modelWorker","ModelWorker","App","setPredictions","loadModel","process","disposeModel","imageData","getImageData","predict","results","Confidences","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce276514.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"loadModel\",\"disposeModel\",\"predict\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"9b03e15b17fa9345732b.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React, {FunctionComponent} from \"react\";\r\nimport './BlurContainer.css';\r\n\r\ntype BlurContainerType = {\r\n    additionalClassname?: string\r\n}\r\n\r\nconst BlurContainer: FunctionComponent<BlurContainerType> = ({ additionalClassname, children }) => {\r\n    // simple container with rounded corners and a blurred translucent background\r\n    let className = \"blur-container\";\r\n    if (!!additionalClassname) {\r\n        className = className + ` ${additionalClassname}`;\r\n    }\r\n    return (\r\n        <div className={className}>\r\n            { children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlurContainer;\r\n","import React, {FunctionComponent} from \"react\";\r\nimport BlurContainer from \"./BlurContainer\";\r\nimport \"./SquareButton.css\";\r\n\r\ntype SquareButtonProps = {\r\n    onClick?: () => void,\r\n    setHover?: (hovering: boolean) => void\r\n};\r\n\r\nconst SquareButton: FunctionComponent<SquareButtonProps> = ({ onClick, setHover, children }) => {\r\n    // Square button that is inside the blur container\r\n    return (\r\n        <div\r\n            onClick={onClick ? () => onClick() : undefined}\r\n            onMouseEnter={setHover ? () => setHover(true) : undefined}\r\n            onMouseLeave={setHover ? () => setHover(false) : undefined}\r\n        >\r\n            <BlurContainer additionalClassname=\"square-button\">\r\n                { children }\r\n            </BlurContainer>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SquareButton;\r\n","export default __webpack_public_path__ + \"static/media/check.20cd8e75.svg\";","export default __webpack_public_path__ + \"static/media/no-check.34c030ac.svg\";","import React from \"react\";\r\nimport check from \"../../Icons/check.svg\";\r\nimport noCheck from \"../../Icons/no-check.svg\";\r\n\r\nimport \"./SourceSelectorItem.css\";\r\n\r\n\r\ntype SourceSelectorItemProps = {\r\n    name: string,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}\r\n\r\n// Component for selecting the webcam source and flipping the image horizontally\r\nfunction SourceSelectorItem({selected, onSelect, name}: SourceSelectorItemProps) {\r\n\r\n    return (\r\n        <div key={name} className=\"source-item-container\" >\r\n            <div className={`source-device${(selected) ? \" source-selected\" : \"\"}`}>\r\n                {name}\r\n            </div>\r\n            <div onClick={() => onSelect()} className=\"source-radio-button\">\r\n                <img src={selected ? check : noCheck} alt={'Select device'} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SourceSelectorItem;\r\n","export default __webpack_public_path__ + \"static/media/gear.9149aa4b.svg\";","import React, {useState} from \"react\";\r\nimport SquareButton from \"../SquareButton\";\r\nimport BlurContainer from \"../BlurContainer\";\r\nimport SourceSelectorItem from \"./SourceSelectorItem\";\r\nimport gear from \"../../Icons/gear.svg\";\r\n\r\nimport \"./SourceSelector.css\";\r\nimport check from \"../../Icons/check.svg\";\r\nimport noCheck from \"../../Icons/no-check.svg\";\r\n\r\n\r\ntype SourceSelectorProps = {\r\n    devices: MediaDeviceInfo[]\r\n    deviceId?: string,\r\n    setDeviceId: (deviceId: string) => void,\r\n    imageFlip: boolean,\r\n    setImageFlip: (imageFlip: boolean) => void,\r\n    selectorVisible: boolean,\r\n    setSelectorVisible: (visible: boolean) => void\r\n}\r\n\r\n// Component for selecting the webcam source and flipping the image horizontally\r\nfunction SourceSelector({devices, deviceId, setDeviceId, imageFlip, setImageFlip, selectorVisible, setSelectorVisible}: SourceSelectorProps) {\r\n    const [hovering, setHover] = useState(false);\r\n\r\n    return (\r\n        <div\r\n            id=\"camera-select-button\"\r\n            onClick={(e) => e.stopPropagation()}\r\n            onMouseLeave={() => {setSelectorVisible(false)}}\r\n        >\r\n            <SquareButton setHover={(hovering) => {setHover(hovering); if (hovering) setSelectorVisible(true);}}>\r\n                <img id=\"gear-icon\" src={gear} alt={\"Gear Icon\"} className={selectorVisible || hovering ? \"gear-rotated\" : undefined} />\r\n            </SquareButton>\r\n            <BlurContainer additionalClassname={`source-selector${selectorVisible ? \" source-expanded\" : \"\"}`}>\r\n                {devices.map((device, key) => (\r\n                    <SourceSelectorItem\r\n                        name={!!device.label ? device.label.replace(/\\(.*\\)/g, '') : `Device ${key + 1}`}\r\n                        onSelect={() => setDeviceId(device.deviceId)}\r\n                        selected={device.deviceId === deviceId}\r\n                        key={device.deviceId}\r\n                    />\r\n                ))}\r\n                <div className=\"toggle-container\">\r\n                    <div className=\"toggle-item-container\">\r\n                        <div className={`toggle-item source-device${(imageFlip) ? \" source-selected\" : \"\"}`}>\r\n                            {\"Flip Image\"}\r\n                        </div>\r\n                        <div onClick={() => setImageFlip(!imageFlip)} className=\"toggle-radio-button\">\r\n                            <img src={imageFlip ? check : noCheck} alt={'Flip Webcam Button'} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </BlurContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SourceSelector;\r\n","import React, {useEffect, useState, useRef, useCallback} from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport SourceSelector from \"./SourceSelector\";\r\nimport \"./Camera.css\";\r\n\r\ntype CameraProps = {\r\n    predictCanvas: (canvas: HTMLCanvasElement) => void;\r\n    predictions?: { [label: string]: number };\r\n}\r\n\r\n// Our webcam display and capture component\r\nfunction Camera({ predictCanvas, predictions }: CameraProps) {\r\n    const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\r\n    const [deviceId, setDeviceId] = useState<string | undefined>(undefined);\r\n    const [imageFlip, setImageFlip] = useState(true);\r\n    const webcamRef = useRef<Webcam>(null);\r\n    const [selectorVisible, setSelectorVisible] = useState(false);\r\n\r\n    // handle any webcam plugged into the computer\r\n    // https://github.com/mozmorris/react-webcam#show-all-cameras-by-deviceid\r\n    const handleDevices = useCallback(\r\n        (mediaDevices: MediaDeviceInfo[]) => {\r\n            // find all the webcams\r\n            const videoDevices = mediaDevices.filter(({kind}) => kind === \"videoinput\");\r\n            setDevices(videoDevices);\r\n            // set our initial webcam to be the first in the list\r\n            if (videoDevices.length > 0) {\r\n                setDeviceId(videoDevices[0].deviceId);\r\n            }\r\n        },[setDevices, setDeviceId]\r\n    );\r\n    useEffect(() => {\r\n        navigator.mediaDevices.enumerateDevices().then(handleDevices);\r\n    }, [handleDevices]);\r\n\r\n    // function to grab the current frame drawn on canvas from the webcam\r\n    const getCanvas: () => Promise<HTMLCanvasElement | undefined> = useCallback(async () => {\r\n        let newImage;\r\n        if (webcamRef.current) {\r\n            newImage = webcamRef.current.getCanvas();\r\n            if (newImage) {\r\n                return newImage;\r\n            }\r\n        }\r\n    }, [webcamRef]);\r\n\r\n    // helper for waiting in our loop when the camera is loading (getting the image)\r\n    const sleep = useCallback((ms: number) => {\r\n        return new Promise<NodeJS.Timeout>(function (resolve, reject) {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }, []);\r\n\r\n    // while we have the webcam mounted, predict frames as fast as we get new predictions back from the model\r\n    useEffect(() => {\r\n        getCanvas().then(async (canvas: HTMLCanvasElement | undefined) => {\r\n            let currentCanvas = canvas;\r\n            while (!currentCanvas) {\r\n                // if no canvas, wait 500ms and try again\r\n                await sleep(500);\r\n                currentCanvas = await getCanvas();\r\n            }\r\n            if (currentCanvas) {\r\n                predictCanvas(currentCanvas);\r\n            }\r\n        })\r\n    }, [sleep, predictions, deviceId, getCanvas, predictCanvas])\r\n\r\n    return (\r\n        <div id=\"video-container\" onClick={() => setSelectorVisible(false)}>\r\n            <SourceSelector\r\n                devices={devices}\r\n                deviceId={deviceId}\r\n                setDeviceId={setDeviceId}\r\n                imageFlip={imageFlip}\r\n                setImageFlip={setImageFlip}\r\n                selectorVisible={selectorVisible}\r\n                setSelectorVisible={setSelectorVisible}\r\n            />\r\n            <Webcam\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                forceScreenshotSourceSize={true}\r\n                screenshotQuality={1}\r\n                audio={false}\r\n                videoConstraints={{\r\n                    width: {ideal: 1920},\r\n                    height: {ideal: 1080},\r\n                    deviceId: !!deviceId ? {exact: deviceId} : undefined\r\n                }}\r\n                mirrored={imageFlip}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Camera;\r\n","import React from \"react\";\r\nimport \"./PredictionEntry.css\";\r\n\r\ntype PredictionEntryProps = {\r\n    label: string\r\n    confidence?: number\r\n    top?: boolean\r\n}\r\n\r\nfunction PredictionEntry({label, confidence, top}: PredictionEntryProps) {\r\n    // render the predicted label and a bar representing the confidence value\r\n    // make the top confidence value green\r\n    return (\r\n        <div key={label} className=\"prediction-entry\">\r\n            {label}\r\n            {!!confidence ?\r\n                <div\r\n                    className={\"prediction-bar\" + (top ? \" prediction-green\" : \"\")}\r\n                    style={{width: (confidence*100).toString() + \"%\"}}\r\n                />\r\n            : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PredictionEntry;\r\n","import React from \"react\";\r\nimport BlurContainer from \"../BlurContainer\";\r\nimport PredictionEntry from \"./PredictionEntry\";\r\nimport \"./Prediction.css\";\r\n\r\ntype PredictionProps = {\r\n    predictions?: { [label: string]: number },\r\n    top?: number\r\n}\r\n\r\nfunction Prediction({predictions, top=3}: PredictionProps) {\r\n    // display the top N (default 3) predictions returned from the model\r\n    let sortedPredictions: Array<[string, number]> | undefined;\r\n    if (!!predictions) {\r\n        // sort our predictions by the confidence value and take the top N\r\n        sortedPredictions = Object.entries(predictions)\r\n            .sort((a, b) => b[1] - a[1])\r\n            .slice(0, top);\r\n    }\r\n    return (\r\n        <div id=\"predictions\">\r\n            <BlurContainer additionalClassname=\"prediction-container\">\r\n                {!!sortedPredictions ?\r\n                    sortedPredictions.map(([label, confidence], idx) => (\r\n                        <PredictionEntry key={label} label={label} confidence={confidence} top={idx===0} />\r\n                    ))\r\n                    : <PredictionEntry label={'Loading...'} />\r\n                }\r\n            </BlurContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Prediction;\r\n","export default __webpack_public_path__ + \"static/media/gallery.4ec4eac8.svg\";","import React, {useEffect, useRef} from \"react\";\r\nimport SquareButton from \"../SquareButton\";\r\nimport gallery from \"../../Icons/gallery.svg\";\r\n\r\nimport \"./ImageSelectorButton.css\";\r\n\r\ntype ImageSelectorButtonProps = {\r\n    setImageFile: (image: File | null) => void;\r\n    imageFile: File | null;\r\n};\r\n\r\n// Component for selecting an image file for prediction\r\nfunction ImageSelectorButton({setImageFile, imageFile}: ImageSelectorButtonProps) {\r\n    // ref to the hidden file input element\r\n    const fileInput = useRef<HTMLInputElement>(null);\r\n\r\n    // if we have a null file (from clearing the image), clear the file input value\r\n    useEffect(\r\n        () => {\r\n            if (!imageFile && fileInput.current) {\r\n                fileInput.current.value = \"\";\r\n            }\r\n        },\r\n        [imageFile, fileInput]\r\n    )\r\n\r\n    // make an onclick that will open the file dialog\r\n    const onClick = () => {\r\n        if (fileInput.current) {\r\n            fileInput.current.click();\r\n        }\r\n    }\r\n\r\n    // set our image file from the picker\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files;\r\n        if (files && files.length > 0) {\r\n            setImageFile(files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id=\"image-select-button\"\r\n            onClick={onClick}\r\n        >\r\n            <SquareButton>\r\n                <img id=\"gallery-icon\" src={gallery} alt={\"File Selector\"} />\r\n            </SquareButton>\r\n            <input ref={fileInput} type=\"file\" accept=\"image/*\" onChange={onChange} style={{display: \"none\"}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageSelectorButton;\r\n","export default __webpack_public_path__ + \"static/media/close.3de684eb.svg\";","import React from \"react\";\r\nimport SquareButton from \"../SquareButton\";\r\nimport close from \"../../Icons/close.svg\";\r\n\r\nimport \"./ImageCloseButton.css\";\r\n\r\ntype ImageCloseButtonProps = {\r\n    setImageFile: (image: File | null) => void;\r\n};\r\n\r\n// Component for clearing the static image and going back to the webcam view\r\nfunction ImageCloseButton({setImageFile}: ImageCloseButtonProps) {\r\n    \r\n    const onClick = () => {\r\n        setImageFile(null);\r\n    };\r\n\r\n    return (\r\n        <div id=\"image-close-button\">\r\n            <SquareButton onClick={onClick}>\r\n                <img id=\"close-icon\" src={close} alt={\"Close\"} />\r\n            </SquareButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageCloseButton;\r\n","import React, {useEffect, useRef} from \"react\";\r\nimport ImageCloseButton from \"./ImageCloseButton\";\r\n\r\nimport \"./StaticImage.css\";\r\n\r\ntype StaticImageProps = {\r\n    predictCanvas: (canvas: HTMLCanvasElement) => void;\r\n    image: File;\r\n    setImageFile: (image: File | null) => void;\r\n}\r\n\r\n// Component for displaying our selected image file for prediction\r\nfunction StaticImage({ predictCanvas, image, setImageFile }: StaticImageProps) {\r\n    // display our image file on a canvas and call the predict function with that canvas\r\n    const canvas = useRef<HTMLCanvasElement>(null);\r\n    const display = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            // make an image to draw on the canvas\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                if (canvas.current) {\r\n                    // draw the image on our canvas\r\n                    canvas.current.width = img.width;\r\n                    canvas.current.height = img.height;\r\n                    const ctx = canvas.current.getContext(\"2d\");\r\n                    if (!!ctx) {\r\n                        // draw our image on the context\r\n                        ctx.drawImage(img,0,0);\r\n                        // drawing is finished, run the prediction!\r\n                        predictCanvas(canvas.current);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // load the image from our reader\r\n            if (e.target) {\r\n                img.src = e.target.result as string;\r\n                if (display.current) {\r\n                    display.current.style.backgroundImage = `url(${e.target.result})`;\r\n                }\r\n            }\r\n        }\r\n        // read our image file and process it!\r\n        reader.readAsDataURL(image);\r\n    }, [image, predictCanvas, display]);\r\n\r\n    return (\r\n        <div id=\"static-image\" ref={display}>\r\n            <ImageCloseButton setImageFile={setImageFile} />\r\n            <canvas ref={canvas} style={{display: \"none\"}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StaticImage;\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport Camera from './camera/Camera';\r\nimport Prediction from './prediction/Prediction';\r\nimport ImageSelectorButton from './staticImage/ImageSelectorButton';\r\nimport StaticImage from './staticImage/StaticImage';\r\n\r\n// @ts-ignore\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport ModelWorker from \"workerize-loader!../model/worker\";\r\n\r\n// create our web worker instance for running the tfjs model without blocking the UI thread\r\nconst modelWorker = ModelWorker();\r\n// the filepaths to our exported signature.json and model.json files (in the public/model folder)\r\nconst signatureFile = process.env.PUBLIC_URL + `/model/signature.json`;\r\nconst modelFile = process.env.PUBLIC_URL + `/model/model.json`;\r\n\r\n\r\nfunction App() {\r\n    // state for keeping track of our predictions -- map of {label: confidence} from running the model on an image\r\n    const [predictions, setPredictions] = useState<{[key: string]: number} | undefined>(undefined);\r\n    // state for using a static image from file picker\r\n    const [imageFile, setImageFile] = useState<File | null>(null);\r\n\r\n    // useEffect callback to load our model\r\n    useEffect(() => {\r\n        modelWorker.loadModel(signatureFile, modelFile);\r\n        return () => {\r\n            modelWorker.disposeModel();\r\n        };\r\n    }, []);\r\n\r\n    // function to run the image from an html canvas element through our model\r\n    const predictCanvas = useCallback((canvas: HTMLCanvasElement) => {\r\n        // get the canvas context\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx) {\r\n            // get the pixel data from the full canvas\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n            // run the async predict function and set the values to our state\r\n            modelWorker.predict(imageData).then((results: {Confidences: {[label: string]: number}}) => {\r\n                if (results) {\r\n                    setPredictions(results.Confidences);\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <ImageSelectorButton setImageFile={setImageFile} imageFile={imageFile} />\r\n            {\r\n                !imageFile ? \r\n                <Camera predictCanvas={predictCanvas} predictions={predictions} /> :\r\n                <StaticImage predictCanvas={predictCanvas} image={imageFile} setImageFile={setImageFile} />\r\n            }\r\n            <Prediction predictions={predictions}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}